# -*- coding: utf-8 -*-
"""James.Sean-PythonCode-ITT103-F2023..ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N6yX_ugtU4K5mLoR0oMrMYNbIhJfWoT1
"""

#Author:Sean James
#Date Created:12/09/23
#Course: ITT103
#Purpose: A Bus reservation system created using Python code


class BusReservationSystem:
    def __init__(self):
        self.seats = [[0] * 4 for _ in range(31)]  # 2D array representing seats
        self.first_class_seats = 27
        self.business_class_seats = 38
        self.economy_seats = 56
        self.reserved_seats = 0

    def display_menu(self):
        print("\nUCC Signature Express Ltd - Travel like a King")
        print("1. One Way - Montego Bay to Kingston")
        print("2. One Way - Kingston to Montego Bay")
        print("3. Two Way - Montego Bay to Kingston and vice versa")
        print("Q. Cancel or Quit")

    def display_seat_map(self, seat_class):
        print(f"\nSeat Map ({seat_class}):")
        print("   A   B     C   D")
        for row in range(31):
            print(f"{row+1:2} ", end="")
            for col in range(4):
                if seat_class == "First Class" and col in [1, 2]:
                    print("   ", end="")
                else:
                    print(" X " if self.seats[row][col] else " O ", end="")
            print()

    def is_seat_available(self, row, col):
        return self.seats[row-1][col] == 0

    def book_seat(self, seat_class, row, col):
        if seat_class == "First Class" and col in [1, 2]:
            print("Error: Aisle seats not available in First Class.")
            return False

        if not self.is_seat_available(row, col):
            print("Error: Seat already reserved.")
            return False

        if self.reserved_seats >= 121:
            print("Error: All seats are booked.")
            return False

        self.seats[row-1][col] = 1
        self.reserved_seats += 1
        print(f"Seat {col}{'AD'[col]}{row} ({seat_class}) booked successfully.")
        return True

    def run(self):
        while True:
            self.reserved_seats = 0  # Reset reserved seats for each run
            self.display_menu()
            user_choice = input("Enter your choice: ").upper()

            if user_choice == 'Q':
                print("Goodbye!")
                break
            elif user_choice.isdigit() and 1 <= int(user_choice) <= 3:
                trip_type = int(user_choice)
                if trip_type == 1:
                    seat_class = "First Class"
                elif trip_type == 2:
                    seat_class = "Business Class"
                elif trip_type == 3:
                    seat_class = "Economy Class"

                self.display_seat_map(seat_class)

                # Nested loop to display seat options
                while True:
                    row = int(input("Enter the row number (1-31): "))
                    if 1 <= row <= 31:
                        break
                    else:
                        print("Error: Invalid row number. Please enter a number between 1 and 31.")

                while True:
                    col = input("Enter the column (A, B, C, D): ").upper()
                    if col in "ABCD":
                        break
                    else:
                        print("Error: Invalid column. Please enter A, B, C, or D.")

                if not self.book_seat(seat_class, row, "ABCD".index(col)):
                    continue

                if self.reserved_seats == 121:
                    print("All seats are booked.")
                    cancel_or_quit = input("Type 'Q' to cancel or 'Quit' to exit: ").upper()
                    if cancel_or_quit == 'Q':
                        print("Reservation canceled.")
                    elif cancel_or_quit == 'QUIT':
                        print("Goodbye!")
                        break
                    else:
                        print("Invalid choice. Restarting reservation system.")
            else:
                print("Error: Invalid choice. Please enter a valid option.")


if __name__ == "__main__":
    bus_reservation_system = BusReservationSystem()
    bus_reservation_system.run()